/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behavior includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Gaming 1
#define LAYER_FN 2
#define LAYER_Num 3
#define LAYER_Magic 4

/* To deal with the situation where there is no Lower layer, to keep &lower happy */

#ifndef LAYER_Lower

#define LAYER_Lower 0

#

endif {
    /* Custom Device-tree */
    /* Glove80 system behavior & macros */

    /

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #else

    macros {
    };

    #endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */

/ {
    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <100>;
            quick-release;
            ignore-modifiers;
        };

        plus_1: plus_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_1";
            bindings = <&kp PLUS>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        lbrk_2: lbrk_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRK_2";
            bindings = <&kp LEFT_BRACKET>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        lbrc_3: lbrc_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC_3";
            bindings = <&kp LBRC>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        lpar_4: lpar_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_4";
            bindings = <&kp LPAR>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        amp_5: amp_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "AMP_5";
            bindings = <&kp AMPS>, <&kp NUMBER_5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        eq_6: eq_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "EQ_6";
            bindings = <&kp EQUAL>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        rpar_7: rpar_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_7";
            bindings = <&kp RPAR>, <&kp NUMBER_7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        rbrc_8: rbrc_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRC_8";
            bindings = <&kp RBRC>, <&kp NUMBER_8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        rbrk_9: rbrk_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRK_9";
            bindings = <&kp RIGHT_BRACKET>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        ast_0: ast_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "AST_0";
            bindings = <&kp ASTRK>, <&kp NUMBER_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        exc_perc: exc_perc {
            compatible = "zmk,behavior-mod-morph";
            label = "EXC_PERC";
            bindings = <&kp EXCL>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        pipe_bslsh: pipe_bslsh {
            compatible = "zmk,behavior-mod-morph";
            label = "PIPE_BSLSH";
            bindings = <&kp PIPE>, <&kp BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        dllr_tilde: dllr_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "DLLR_TILDE";
            bindings = <&kp DOLLAR>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        caret_at: caret_at {
            compatible = "zmk,behavior-mod-morph";
            label = "CARET_AT";
            bindings = <&kp CARET>, <&kp AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        bt_pound: bt_pound {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_POUND";
            bindings = <&kp GRAVE>, <&kp POUND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };
    };
};

/* Automatically generated macro definitions */

/ {
    macros {
        // Command for vim saving

        vimsave: vimsave {
            label = "&VIMSAVE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp RET>;
        };

        // format vim

        vimfmt: vimfmt {
            label = "&VIMFMT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp F &kp F>;
        };
    };
};

/* Automatically generated behavior definitions */

/ {
    behaviors {
    };
};

/* Automatically generated combos definitions */

/ {
    combos {
        compatible = "zmk,combos";

        // Toggles caps lock when both shift keys are pressed

        combo_toggle_caps {
            timeout-ms = <30>;
            key-positions = <70 73>;
            bindings = <&kp CAPS>;
            layers = <0>;
        };
    };
};

/* Automatically generated keymap */

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp HOME              &kp PG_UP  &kp PG_DN  &caret_at  &exc_perc                                                                                    &kp HOME  &kp PG_UP  &kp PG_DN  &kp END    &mo 2
&dllr_tilde           &plus_1    &lbrk_2    &lbrc_3    &lpar_4    &amp_5                                                                     &eq_6  &rpar_7   &rbrc_8    &rbrk_9    &ast_0     &bt_pound
&kp TAB               &kp SQT    &kp COMMA  &kp DOT    &kp P      &kp Y                                                                      &kp F  &kp G     &kp C      &kp R      &kp L      &kp DEL
&kp ESC               &kp A      &kp O      &kp E      &kp U      &kp I                                                                      &kp D  &kp H     &kp T      &kp N      &kp S      &kp RET
&kp BSLH              &kp FSLH   &kp Q      &kp J      &kp K      &kp X   &kp SEMI   &kp LCTRL    &kp LALT  &kp RALT  &kp RCTRL   &kp K_APP  &kp B  &kp M     &kp W      &kp V      &kp Z      &kp MINUS
&magic LAYER_Magic 0  &kp LGUI   &kp LALT   &vimfmt    &vimsave           &kp SPACE  &skq LSHIFT  &kp LGUI  &mo 3     &skq RSHFT  &kp BSPC          &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &to 1
            >;
        };

        layer_Gaming {
            bindings = <
&kp F1                &kp F2     &kp F3  &kp F4  &kp F5                                                               &none    &none    &none    &none  &none
&kp N5                &kp ESC    &kp N1  &kp N2  &kp N3  &kp N4                                                &none  &kp F10  &kp F11  &kp F12  &none  &none
&kp N6                &kp TAB    &kp Q   &kp W   &kp E   &kp R                                                 &none  &kp F7   &kp F8   &kp F9   &none  &none
&kp N7                &kp LSHFT  &kp A   &kp S   &kp D   &kp F                                                 &none  &kp F4   &kp F5   &kp F6   &none  &none
&kp N8                &kp LCTRL  &kp Z   &kp X   &kp C   &kp V   &kp T      &kp M  &kp J  &none  &none  &none  &none  &kp F1   &kp F2   &kp F3   &none  &none
&magic LAYER_Magic 0  &kp LALT   &kp N9  &kp N0  &kp I           &kp SPACE  &kp G  &kp L  &none  &none  &none         &none    &none    &none    &none  &to 0
            >;
        };

        layer_FN {
            bindings = <
&trans  &trans  &trans   &trans   &trans                                                                   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F10  &kp F11  &kp F12  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F7   &kp F8   &kp F9   &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4   &kp F5   &kp F6   &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1   &kp F2   &kp F3   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans   &trans   &trans           &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Num {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N7  &kp N8  &kp N9  &kp N0                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
